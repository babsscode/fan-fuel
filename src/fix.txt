
not favorite league just league

// --- Data loading ---
  useEffect(() => {
    const loadData = async () => {
      try {
        console.log('üöÄ Starting data load...');
        
        if (!user) {
          console.log('‚ùå No user found');
          return;
        }
        console.log('‚úÖ User found:', user.uid);

        console.log('üìã Fetching user preferences...');
        const userData = await getUserPreferences(user.uid);
        console.log('üìã User data:', userData);
        
        if (!userData?.favoriteTeam) {
          console.log('‚ùå No favorite team found in user data');
          return;
        }
        console.log('‚öΩ User favorite team:', userData.favoriteTeam);

        console.log('üìÖ Fetching schedule data...');
        const response = await fetch('/schedule.json');
        console.log('üìÖ Schedule response status:', response.status);
        
        if (!response.ok) {
          console.error('‚ùå Failed to fetch schedule.json:', response.status, response.statusText);
          return;
        }

        const scheduleData = await response.json();
        console.log('üìÖ Raw schedule data:', scheduleData);
        console.log('üìÖ Schedule data length:', Array.isArray(scheduleData) ? scheduleData.length : 'Not an array');

        if (!Array.isArray(scheduleData)) {
          console.error('‚ùå Schedule data is not an array:', typeof scheduleData);
          return;
        }

        // Filter matches using enhanced team matching
        console.log('üîç Starting match filtering...');
        const userMatches: Match[] = scheduleData
          .filter((match: any) => {
            console.log('üîç Checking match:', match);
            const homeMatch = teamsMatch(match.homeTeam, userData.favoriteTeam);
            const awayMatch = teamsMatch(match.awayTeam, userData.favoriteTeam);
            const isUserMatch = homeMatch || awayMatch;
            console.log(`üîç Match result: ${match.homeTeam} vs ${match.awayTeam} = ${isUserMatch}`);
            return isUserMatch;
          })
          .map((match: any) => {
            const isHome = teamsMatch(match.homeTeam, userData.favoriteTeam);
            const userTeam = isHome ? match.homeTeam : match.awayTeam;
            const opponent = isHome ? match.awayTeam : match.homeTeam;
            const matchDisplayName = `${userTeam} vs ${opponent}`;
            
            const mappedMatch = {
              id: `${match.utcDate}_${match.homeTeam}_vs_${match.awayTeam}`.replace(/\W/g, '_'),
              opponent: opponent,
              userTeam: userTeam,
              date: match.utcDate.split('T')[0],
              time: new Date(match.utcDate).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),
              venue: isHome ? 'Home Stadium' : 'Away Ground',
              competition: `Matchday ${match.matchday}`,
              rawDate: match.utcDate,
              matchDisplayName: matchDisplayName
            };
            console.log('üìã Mapped match:', mappedMatch);
            return mappedMatch;
          })
          .sort((a: Match, b: Match) => new Date(a.rawDate).getTime() - new Date(b.rawDate).getTime());

        console.log('‚úÖ Final filtered matches:', userMatches);
        console.log('‚úÖ Total matches found:', userMatches.length);

        setMatches(userMatches);

        if (userMatches.length > 0) {
          console.log('üéØ Setting selected match:', userMatches[0]);
          setSelectedMatch(userMatches[0]);

          console.log('üí™ Loading workouts for match:', userMatches[0].id);
          const workoutsFromDB = await getWorkoutsForMatch(user.uid, userMatches[0].id);
          console.log('üí™ Workouts from DB:', workoutsFromDB);
          
          // Ensure each workout has all Workout fields (fallbacks if needed)
          setWorkouts(
            workoutsFromDB.map((w: any) => ({
              id: w.id,
              type: w.type || '',
              targetReps: w.targetReps ?? 10,
              completedReps: w.completedReps ?? 0,
              category: w.category || 'Technical',
              emoji: w.emoji || '‚öΩ',
              estimatedTime: w.estimatedTime ?? 15,
              matchId: w.matchId || userMatches[0].id,
              createdAt: w.createdAt || new Date().toISOString()
            }))
          );
        } else {
          console.log('‚ö†Ô∏è No matches found for user team');
        }
      } catch (error) {
        console.error('‚ùå Error loading data:', error);
        console.error('‚ùå Error stack:', error);
      } finally {
        console.log('üèÅ Data loading complete');
        setLoading(false);
      }
    };

    loadData();
  }, [user]);